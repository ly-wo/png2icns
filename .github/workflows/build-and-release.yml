name: Build and Release

on:
  push:
    branches: [main, master, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: png2icns:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test help command
          docker run --rm png2icns:test --help

          # Create test directories
          mkdir -p test-input test-output

          # Create a simple test PNG using Python
          docker run --rm -v $(pwd)/test-input:/tmp python:3.9-slim bash -c "
          pip install Pillow > /dev/null 2>&1
          python3 -c \"
          from PIL import Image
          img = Image.new('RGB', (512, 512), color='blue')
          img.save('/tmp/test.png')
          print('Created test PNG')
          \"
          "

          # Test conversion
          docker run --rm \
            -v $(pwd)/test-input:/app/input \
            -v $(pwd)/test-output:/app/output \
            png2icns:test \
            -i /app/input/test.png \
            -o /app/output/test.icns \
            --verbose

          # Verify output
          if [ -f "test-output/test.icns" ]; then
            echo "✅ Conversion test passed"
            ls -la test-output/test.icns
            file test-output/test.icns
          else
            echo "❌ Conversion test failed"
            exit 1
          fi

  build-binary:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    needs: test
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: png2icns-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact-name: png2icns-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: png2icns-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: png2icns-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          echo "Installing musl tools for static linking..."
          sudo apt-get update
          sudo apt-get install -y musl-tools

          # Verify musl-gcc is available
          which musl-gcc || echo "Warning: musl-gcc not found"

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          echo "Building for target: ${{ matrix.target }}"
          echo "Rust version:"
          rustc --version
          echo "Cargo version:"
          cargo --version

          cargo build --release --target ${{ matrix.target }}

          # Verify binary was created
          echo "Checking for binary..."
          ls -la target/${{ matrix.target }}/release/ || true

          if [ ! -f "target/${{ matrix.target }}/release/png2icns" ] && [ ! -f "target/${{ matrix.target }}/release/png2icns.exe" ]; then
            echo "Error: Binary not found after build"
            exit 1
          fi

          echo "Binary build successful!"

      - name: Create artifact directory
        run: |
          mkdir -p artifacts

          # Copy binary (handle potential Windows .exe extension)
          if [ -f "target/${{ matrix.target }}/release/png2icns.exe" ]; then
            cp target/${{ matrix.target }}/release/png2icns.exe artifacts/${{ matrix.artifact-name }}.exe
            BINARY_NAME="${{ matrix.artifact-name }}.exe"
          else
            cp target/${{ matrix.target }}/release/png2icns artifacts/${{ matrix.artifact-name }}
            BINARY_NAME="${{ matrix.artifact-name }}"
          fi

          # Create archive
          cd artifacts
          tar -czf ${{ matrix.artifact-name }}.tar.gz $BINARY_NAME

          # Create checksums (cross-platform)
          echo "Creating checksums..."
          if command -v sha256sum >/dev/null 2>&1; then
            echo "Using sha256sum"
            sha256sum $BINARY_NAME > $BINARY_NAME.sha256
            sha256sum ${{ matrix.artifact-name }}.tar.gz > ${{ matrix.artifact-name }}.tar.gz.sha256
          elif command -v shasum >/dev/null 2>&1; then
            echo "Using shasum"
            shasum -a 256 $BINARY_NAME > $BINARY_NAME.sha256
            shasum -a 256 ${{ matrix.artifact-name }}.tar.gz > ${{ matrix.artifact-name }}.tar.gz.sha256
          else
            echo "Error: No SHA256 utility found"
            exit 1
          fi

          # List created files for debugging
          echo "Created artifacts:"
          ls -la

          # Verify required files exist
          if [ ! -f "${{ matrix.artifact-name }}.tar.gz" ]; then
            echo "❌ Error: Archive file not created"
            exit 1
          fi

          if [ ! -f "${{ matrix.artifact-name }}.tar.gz.sha256" ]; then
            echo "❌ Error: Checksum file not created"
            exit 1
          fi

          echo "✅ All required files created successfully"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/*

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binary, build-docker]
    if: startsWith(github.ref, 'refs/tags/v') && needs.build-binary.result == 'success'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check prerequisite jobs
        run: |
          echo "Checking prerequisite job results..."
          echo "build-binary result: ${{ needs.build-binary.result }}"
          echo "build-docker result: ${{ needs.build-docker.result }}"

          if [ "${{ needs.build-binary.result }}" != "success" ]; then
            echo "❌ build-binary job did not succeed"
            exit 1
          fi

          echo "✅ All prerequisite jobs completed successfully"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts
        run: |
          echo "Checking downloaded artifacts..."
          if [ -d "artifacts" ]; then
            echo "✅ Artifacts directory exists"
            echo "Contents of artifacts directory:"
            find artifacts -type f -ls || echo "No files found in artifacts"
          else
            echo "❌ Artifacts directory does not exist"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Check if we have any artifacts to process
          if [ ! -d "artifacts" ] || [ -z "$(find artifacts -name "*.tar.gz" 2>/dev/null)" ]; then
            echo "❌ No binary artifacts found!"
            echo "This usually means the build-binary jobs failed."
            echo "Check the build-binary job logs for errors."
            exit 1
          fi

          # Copy all binary artifacts
          echo "Copying binary artifacts..."
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.sha256" -exec cp {} release-assets/ \;

          # Verify we have files to work with
          cd release-assets
          if [ -z "$(ls -A)" ]; then
            echo "❌ No files were copied to release-assets!"
            exit 1
          fi

          # Create a combined checksums file
          if ls *.sha256 >/dev/null 2>&1; then
            cat *.sha256 > checksums.txt
            echo "✅ Created combined checksums file"
          else
            echo "⚠️ No checksum files found"
          fi

          # List all files
          echo "📦 Release assets prepared:"
          ls -la

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          generate_release_notes: true
          files: |
            release-assets/*
          body: |
            ## 🚀 PNG to ICNS Converter ${{ steps.version.outputs.VERSION }}

            ### 📦 Downloads

            Choose the appropriate binary for your platform:

            - **Linux x86_64**: `png2icns-linux-x86_64.tar.gz`
            - **Linux x86_64 (musl)**: `png2icns-linux-x86_64-musl.tar.gz`
            - **macOS x86_64**: `png2icns-macos-x86_64.tar.gz`
            - **macOS ARM64**: `png2icns-macos-aarch64.tar.gz`

            ### 🐳 Docker Images

            ```bash
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
            docker pull ghcr.io/${{ github.repository }}:latest

            # Run conversion
            docker run --rm -v $(pwd)/input:/app/input -v $(pwd)/output:/app/output \
              ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }} \
              -i /app/input/icon.png -o /app/output/icon.icns
            ```

            ### ✅ Verification

            All binaries include SHA256 checksums for verification:

            ```bash
            # Verify checksum
            sha256sum -c png2icns-linux-x86_64.tar.gz.sha256
            ```

            ### 🔧 Installation

            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/png2icns-linux-x86_64.tar.gz
            tar -xzf png2icns-linux-x86_64.tar.gz

            # Make executable and move to PATH
            chmod +x png2icns-linux-x86_64
            sudo mv png2icns-linux-x86_64 /usr/local/bin/png2icns

            # Test installation
            png2icns --help
            ```

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${GITHUB_REF#refs/heads/}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $TAG"

          # Verify image exists
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          echo "Checking if image exists: $IMAGE_REF"
          if docker manifest inspect "$IMAGE_REF" >/dev/null 2>&1; then
            echo "Image exists and is accessible"
            echo "image-exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist or is not accessible"
            echo "image-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        if: steps.image-tag.outputs.image-exists == 'true'
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          format: "sarif"
          output: "trivy-results.sarif"
          skip-files: "/usr/local/bin/docker-entrypoint.sh"
          skip-dirs: "/tmp,/var/tmp"
          timeout: "10m"

      - name: Skip scan notification
        if: steps.image-tag.outputs.image-exists == 'false'
        run: |
          echo "⚠️ Skipping security scan - Docker image not found or not accessible"
          echo "This may happen if the Docker build job failed or the image wasn't pushed"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: "trivy-results.sarif"
