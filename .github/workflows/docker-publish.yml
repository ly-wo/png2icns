name: Docker Publish

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  schedule:
    # Rebuild weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern=weekly-{{date 'YYYYMMDD'}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          skip-files: "/usr/local/bin/docker-entrypoint.sh"
          skip-dirs: "/tmp,/var/tmp"
          timeout: "10m"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test published image
        run: |
          # Test the published image
          echo "Testing published image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          
          # Test help command
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }} --help
          
          # Create test image
          mkdir -p test-docker-input test-docker-output
          docker run --rm -v $(pwd)/test-docker-input:/tmp python:3.9-slim bash -c "
          pip install Pillow > /dev/null 2>&1
          python3 -c \"
          from PIL import Image
          img = Image.new('RGB', (256, 256), color='purple')
          img.save('/tmp/test-publish.png')
          print('Created test image for published Docker image')
          \"
          "
          
          # Test conversion
          docker run --rm \
            -v $(pwd)/test-docker-input:/app/input \
            -v $(pwd)/test-docker-output:/app/output \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }} \
            -i /app/input/test-publish.png \
            -o /app/output/test-publish.icns \
            --verbose
          
          # Verify output
          if [ -f "test-docker-output/test-publish.icns" ]; then
            echo "✅ Published image test passed"
            ls -la test-docker-output/test-publish.icns
            file test-docker-output/test-publish.icns
          else
            echo "❌ Published image test failed"
            exit 1
          fi

  update-readme:
    name: Update README with latest image info
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest image info
        run: |
          # Get the latest image digest
          LATEST_DIGEST=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest | jq -r '.config.digest')
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Update README with build info (if there's a placeholder)
          if grep -q "<!-- BUILD_INFO -->" README.md; then
            sed -i "s/<!-- BUILD_INFO -->/Last updated: $CURRENT_DATE/" README.md
          fi
          
          # Commit changes if any
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: update README with latest build info [skip ci]"
            git push
          fi